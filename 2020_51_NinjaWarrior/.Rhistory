group_by(obstacle_name, obstacle_order) %>%
summarize(value = n())
data$obstacle_order <- as.character(data$obstacle_order)
data
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
data <- ninja %>%
filter(obstacle_order == 1 | obstacle_order == 2) %>%
group_by(obstacle_name, obstacle_order) %>%
summarize(value = n())
data$obstacle_order <- as.character(data$obstacle_order)
data$obstacle_order <- as.character(data$obstacle_order)
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(as.factor(data$obstacle_order)), ncol(data)) )
colnames(to_add) <- colnames(data)
to_add$obstacle_order <- rep(levels(as.factor(data$obstacle_order)), each=empty_bar)
data <- rbind(data, to_add)
data <- data %>% arrange(obstacle_order)
data$id <- seq(1, nrow(data))
# Get the name and the y position of each label
label_data <- data
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- data %>%
group_by(obstacle_order) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=obstacle_order)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=obstacle_order), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=obstacle_order), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=obstacle_name, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=obstacle_order), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
p
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=obstacle_order)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=obstacle_order), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold") + #, hjust=1
geom_bar(aes(x=as.factor(id), y=value, fill=obstacle_order), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=obstacle_name, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=obstacle_order), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
# Make the plot
p <- ggplot(data, aes(x=as.factor(id), y=value, fill=obstacle_order)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=obstacle_order), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c("20", "40", "60", "80") , color="grey", size=3 , angle=0, fontface="bold", hjust=1) +
geom_bar(aes(x=as.factor(id), y=value, fill=obstacle_order), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=obstacle_name, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=obstacle_order), hjust=c(1,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
ninja <- readr::read_csv('ninja.csv')
ninja <- readr::read_csv('ninja.csv')
ninja$id <- 1:nrow(ninja)
lastOb <- ninja %>% mutate(tempID = paste(season, location, round_stage, sep="_")) %>%
group_by(tempID) %>%
summarize(max = max(obstacle_order))
#ninja$pos <- ""
oseq <- data.frame(Sequence = "", id=0, seqLength=0)
for (i in 1:880) { #880
if(ninja[i, "obstacle_order"] == 1) {
#This is the first obstacle in the series, mark this as a starting point
start <- i
}
else {
#We are after the start, so collect obstacle sequences
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 2))
if( (i-2) >= start) {
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-2, "obstacle_name"], ":",
ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 3))
}
if( (i-3) >= start) {
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-3, "obstacle_name"], ":",
ninja[i-2, "obstacle_name"], ":",
ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 4))
}
if( (i-4) >= start) {
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-4, "obstacle_name"], ":",
ninja[i-3, "obstacle_name"], ":",
ninja[i-2, "obstacle_name"], ":",
ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 5))
}
}
if(ninja[i+1, "obstacle_order"] < ninja[i, "obstacle_order"]) {
#This is the last obstacle in the series,
ninja[i,"pos"] <- "Last"
}
}
for (i in 1:880) { #880
if(ninja[i, "obstacle_order"] == 1) {
#This is the first obstacle in the series, mark this as a starting point
start <- i
}
else {
#We are after the start, so collect obstacle sequences
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 2))
if( (i-2) >= start) {
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-2, "obstacle_name"], ":",
ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 3))
}
if( (i-3) >= start) {
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-3, "obstacle_name"], ":",
ninja[i-2, "obstacle_name"], ":",
ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 4))
}
if( (i-4) >= start) {
oseq <- rbind(oseq,
data.frame(
Sequence=paste(ninja[i-4, "obstacle_name"], ":",
ninja[i-3, "obstacle_name"], ":",
ninja[i-2, "obstacle_name"], ":",
ninja[i-1, "obstacle_name"], ":",
ninja[i, "obstacle_name"], sep=""),
id=ninja[i, "id"],
seqLength = 5))
}
}
if(ninja[i+1, "obstacle_order"] < ninja[i, "obstacle_order"]) {
#This is the last obstacle in the series,
ninja[i,"pos"] <- "Last"
}
}
tbl <- oseq %>% group_by(Sequence) %>%
summarize(count = n(), id=max(id), seqLength = max(seqLength)) %>%
arrange(desc(count)) %>%
slice_head(n=20)
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
replace_na(list(pos = "First")) %>%
group_by(obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
FtoL
table(FtoL$pos)
FtoL <- factor(FtoL, levels = FtoL$obstacle_name[order(FtoL$count)])
FtoL %>% filter(pos=="First") %>% arrange(count) %>% slice_head(n=20) %>% ggplot(aes(x=obstacle_name, y=count)) +geom_bar(stat="identity") + coord_flip()
library(tidyverse)
FtoL %>% filter(pos=="First") %>% arrange(count) %>% slice_head(n=20) %>% ggplot(aes(x=obstacle_name, y=count)) +geom_bar(stat="identity") + coord_flip()
FtoL
FtoL <- ninja %>%
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
replace_na(list(pos = "First")) %>%
group_by(obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
replace_na(list(pos = "First")) %>%
group_by(obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
FtoL
FtoL$obstacle_name <- as.factor(FtoL$obstacle_name)
FtoL
FtoL$obstacle_name <- factor(FtoL, levels = FtoL$obstacle_name[order(FtoL$count)])
FtoL$obstacle_name <- factor(FtoL$obstacle_name, levels = FtoL$obstacle_name[order(FtoL$count)])
FtoL
FtoL %>% filter(pos=="First") %>% arrange(count) %>% slice_head(n=20) %>% ggplot(aes(x=obstacle_name, y=count)) +geom_bar(stat="identity") + coord_flip()
tbl <- oseq %>% group_by(Sequence) %>%
summarize(count = n(), id=max(id), seqLength = max(seqLength)) %>%
arrange(desc(count)) #%>% slice_head(n=20)
tbl
tbl$Sequence <- factor(tbl$Sequence, levels = tbl$Sequence[order(tbl$count)])
tbl
ninja
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
replace_na(list(pos = "First")) %>%
group_by(round_stage, obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
library(hrbrthemes)
FtoL
FtoL %>% ggplot(aes(x=obstacle_name, y=round_stage, color=count)) +
geom_point(size=6) +
theme_ipsum()
p <- FtoL %>% ggplot(aes(day,hour,fill=temp))+
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Hrly Temps C",option ="C")
library(viridis)
p <- FtoL %>% ggplot(aes(day,hour,fill=temp))+
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Hrly Temps C",option ="C")
p
p <- FtoL %>% ggplot(aes(obstacle_name,round_stage,fill=count))+
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Obstacle Count",option ="C")
p <-p + facet_grid(pos~.)
p
p <-p + facet_grid(. ~ pos)
p
p <-p + theme_minimal(base_size = 8)
p
FtoL %>% ggplot(aes(obstacle_name,round_stage,fill=count)) +
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Obstacle Count",option ="C") +
facet_grid(pos~.) +
theme_minimal(base_size = 8)
FtoL %>% ggplot(aes(round_stage,obstacle_name, fill=count)) +
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Obstacle Count",option ="C") +
facet_grid(pos~.) +
theme_minimal(base_size = 8)
FtoL %>% ggplot(aes(round_stage,obstacle_name, fill=count)) +
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Obstacle Count",option ="C") +
facet_grid(.~pos) +
theme_minimal(base_size = 8)
FtoL
FtoL
FtoL %>% select(pos == "First")
FtoL %>% filter(pos == "First")
FtoL %>% filter(pos == "First") %>% slice_head(n=5)
FtoL %>% filter(pos == "First") %>% slice_max(n=5)
FtoL %>% filter(pos == "First") %>% slice_max(count, n=5)
FtoL %>% filter(pos == "First") %>% arrange(desc(count)) %>% slice_max(count, n=5)
FtoL %>% filter(pos == "First") %>% arrange(desc(count))
FtoL %>% filter(pos == "First") %>% arrange(desc(count)) %>% slice_head(n=5)
FtoL %>% filter(pos == "First") %>% arrange(desc(count)) %>% slice_max(count, n=5)
FtoL %>% filter(pos == "First") %>% arrange(desc(count)) %>% slice_max(count, n=10)
FtoL %>% filter(pos == "First") %>% arrange(desc(count)) %>% slice_max(count, n=1)
FtoL %>% filter(pos == "First") %>% arrange(desc(count))
FtoL
table(FtoL$round_stage)
ninja
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
filter(season>3) %>%
replace_na(list(pos = "First")) %>%
group_by(round_stage, obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
FtoL
table(FtoL$round_stage)
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
replace_na(list(pos = "First")) %>%
group_by(round_stage, obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
table(FtoL$round_stage)
FtoL
View(FtoL)
View(FtoL)
FtoL
FtoL %>% slice_head(n=20)
FtoL %>% filter(count > 1)
FtoL %>% filter(count > 3)
FtoL <- ninja %>%
filter(pos=="Last" | obstacle_order==1) %>%
filter(count >1) %>%
replace_na(list(pos = "First")) %>%
group_by(round_stage, obstacle_name, pos) %>%
summarize(count = n()) %>%
arrange(pos, desc(count))
p <- FtoL %>% ggplot(aes(obstacle_name,round_stage,fill=count)) +
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Obstacle Count",option ="C") +
facet_grid(pos~.) +
theme_minimal(base_size = 8)
p
p+ theme(axis.text.x = element_text(angle = 90))
p <- FtoL %>% ggplot(aes(obstacle_name,round_stage,fill=count)) +
geom_tile(color= "white",size=0.1) +
scale_fill_viridis(name="Obstacle Count",option ="C") +
facet_grid(.~pos) +
theme_minimal(base_size = 8) +
theme(axis.text.x = element_text(angle = 90))
p
mis_file = "lesmiserables.txt"
mis_file
mis_graph = read.graph(mis_file, format="gml")
library(devtools)
install_github('arcdiagram', username='gastonstat')
devtools::install_github('gastonstat/arcdiagram')
library(arcdiagram)
mis_graph = read.graph(mis_file, format="gml")
?read.graph
??read.graph
star_graph = graph.star(10, mode="out")
library(arcdiagram)
??graph.star
install.packages("igraph")
star_graph = graph.star(10, mode="out")
library(igraph)
star_graph = graph.star(10, mode="out")
star_graph
?star_graph = graph.star(10, mode="out")
?graph.star
star_edges = get.edgelist(star_graph)
star_edges
arcplot(star_edges)
arcplot(star_edges, show.nodes=TRUE, sorted=TRUE, decreasing=TRUE, las=1)
arcplot(star_edges, ordering=sample(1:10), labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
op = par(mar = c(0.5, 5, 0.5, 3))
arcplot(star_edges, ordering=sample(1:10), horizontal=FALSE,
labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
par(op)
arcplot(star_edges, ordering=sample(1:10), labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
mis_graph = read.graph(mis_file, format="gml")
getwd()
mis_file
mis_graph = read.graph("lesmiserables.gml", format="gml")
mis_graph <- read.graph("lesmiserables.gml", format="gml")
star_edges
ninja
star_graph
star_edges
str(star_edges
str(star_edges)
summary(star_edges)
str(star_edges)
ninja
ninja[1:6,]
ninja[1:6,"obstacle_name"]
matrx(ninja[1:6,"obstacle_name"], ncol=2)
matrix(ninja[1:6,"obstacle_name"], ncol=2)
matrix(ninja[1:6,"obstacle_name"], ncol=2, byrow = True)
matrix(ninja[1:6,"obstacle_name"], ncol=2, byrow = TRUE)
?matrix
is.matrix(star_edges)
matrix(as.vector(ninja[1:6,"obstacle_name"]), ncol=2, byrow = TRUE)
matrix(as.vector(ninja[1:6,"obstacle_name"]), ncol=2)
as.vector(ninja[1:6,"obstacle_name"])
matrix(as.vector(ninja[1:6,"obstacle_name"]), ncol=2, nrow=3)
matrix(ninja[1:6,"obstacle_name"], ncol=2, nrow=3)
temp <- as.vector(ninja[1:6,"obstacle_name"])
temp
matrix(temp, ncol=2, nrow=3)
as.matrix(temp, ncol=2, nrow=3)
as.matrix(temp, ncol=2)
ninja[1:6,"obstacle_name"]
as.matrix(temp, ncol=2)
as.matrix(temp)
as.matrix(temp, ncol=2)
ninja[1:3,"obstacle_name"]
ninja[1:6,"obstacle_name"]
as.list(ninja[1:6,"obstacle_name"])
matrix(as.list(ninja[1:6,"obstacle_name"]), ncol=2, nrow=3)
as.list(ninja[1:6,"obstacle_name"])
arcplot(star_edges)
arcplot(matrix(as.list(ninja[1:6,"obstacle_name"]), ncol=2, nrow=3))
graph(matrix(as.list(ninja[1:6,"obstacle_name"]), ncol=2, nrow=3))
graph(as.list(ninja[1:6,"obstacle_name"]))
graph(as.list(ninja[1:6,"obstacle_name"]))
as.list(ninja[1:6,"obstacle_name"])
str(as.list(ninja[1:6,"obstacle_name"]))
graph(as.list(ninja[1:6,"obstacle_name"]))
graph(as.vector(ninja[1:6,"obstacle_name"]))
gd <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6))
plot(gd
plot(gd)
arcplot(gd)
gd
gd <- graph(c("wall","spider", "runup","grip", "pull","lift", "pull","reach", "run","rest", "rest","run"))
plot(gd)
as.list(ninja[1:6,"obstacle_name"])
temp <- c("Quintuple Steps", "Rope Swing", "Rolling Barrel", "Jumping Spider", "Pipe Slider", "Warped Wall")
graph.star(temp, mode = "out")
plot(temp)
plot(graph(temp))
arcplot(graph(temp))
as.list(ninja[1:6,"obstacle_name"])
dim(as.list(ninja[1:6,"obstacle_name"])) <- c(2,3)
str(as.list(ninja[1:6,"obstacle_name"]))
str(as.vector(ninja[1:6,"obstacle_name"]))
str(as.matrix(ninja[1:6,"obstacle_name"]))
as.matrix(ninja[1:6,"obstacle_name"])
as.matrix(ninja[1:6,"obstacle_name"], ncol=2)
as.matrix(temp, ncol=2)
temp
as.matrix(temp, ncol=2, nrow=3)
matrix(temp, ncol=2, nrow=3)
temp
mtemp <- matrix(temp, ncol=2, nrow=3)
arcplot(mtemp)
star_edges
arcplot(star_edges)
star_edges
arcplot(star_edges)
arcplot(star_edges, ordering=sample(1:10), labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
arcplot(star_edges, show.nodes=TRUE, sorted=TRUE, decreasing=TRUE, las=1)
star_edges
arcplot(star_edges, show.nodes=TRUE, las=1)
library(arcdiagram)
star_graph = graph.star(10, mode="out")
star_edges = get.edgelist(star_graph)
star_edges
arcplot(star_edges)
par(op)
arcplot(star_edges, ordering=sample(1:10), horizontal=FALSE,
labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
arcplot(star_edges, ordering=sample(1:10), labels=paste("node",1:10,sep="-"),
lwd.arcs=4*runif(10,.5,2), col.arcs=hsv(runif(9,0.6,0.8),alpha=0.4),
show.nodes=TRUE, pch.nodes=21, cex.nodes=runif(10,1,3),
col.nodes="gray80", bg.nodes="gray90", lwd.nodes=2)
